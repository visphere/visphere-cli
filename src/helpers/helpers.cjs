'use strict';
/*
 * Copyright (c) 2023 by MoonSphere Systems
 * Originally developed by Mi≈Çosz Gilga <https://miloszgilga.pl>
 */
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const colors = require('colors');
const commandLineArgs = require('command-line-args');
const config = require('../config.cjs');
const { EOL } = require('os');

colors.enable();

module.exports = {
  printCopyHeader: function () {
    console.log(
      `(c) ${new Date().getFullYear()} by ${config.licensedBy.cyan}. On ${
        config.license
      } license.`
    );
    console.log(`Developed by ${config.mainDeveloper}.${EOL}`);
    console.log(`  Personal page: ${config.personalPageUrl}`);
    console.log(`  Repository url: ${config.projectPageUrl}${EOL}`);
  },
  contentHeader: [
    `#! (c) ${new Date().getFullYear()} by ${config.licensedBy}. On ${
      config.license
    } license.${EOL}`,
    `#! Developed by ${config.mainDeveloper}.${EOL}`,
    `#!${EOL}`,
    `#!   Personal page: ${config.personalPageUrl}${EOL}`,
    `#!   Repository url: ${config.projectPageUrl}${EOL}`,
    `#!${EOL}`,
    `#! Generated by NodeJS Environment, on ${new Date().toISOString()}${EOL}`,
    `#! Node iterpreter version, ${process.version}, platform: ${process.platform}${EOL}`,
  ].join(''),
  printExecutableScriptInfo: function () {
    console.log(
      `Executing script from: ${path.basename(process.argv[1]).cyan}`
    );
  },
  printSelectedModeInfo: function (mode) {
    console.log(`Preparing for ${`"${mode}"`.cyan} mode.`);
  },
  parseExecutableProperties: function (command) {
    return {
      command: process.platform === 'win32' ? 'cmd' : 'bash',
      args: [process.platform === 'win32' ? '/c' : '-c', command],
    };
  },
  printSuccessMessage: function (message) {
    console.log(`SUCCESS! ${message}`.green);
  },
  printErrorMessage: function (message) {
    console.log(`ERROR! ${message}`.red);
  },
  printNewLine: function () {
    console.log();
  },
  checkIfPassedModeIsValid: function (mode) {
    if (mode !== 'dev' && mode !== 'prod') {
      this.printErrorMessage(
        'Unrecognized mode. Available only "dev" and "prod".'
      );
      process.exit(1);
    }
  },
  stopSucessSpinner: function (spinner, message, stage, allStages) {
    spinner.stop(true);
    console.log(`\u2713 [${stage}/${allStages}] ${message}.`.green);
  },
  stopErrorSpinner: function (spinner, message, stage, allStages) {
    spinner.stop(true);
    console.log(`X [${stage}/${allStages}] ${message}.`.red);
  },
  revalidateSpinnerContent: function (spinner, stage, allStages, content) {
    spinner.setSpinnerTitle(`[${stage}/${allStages}] ${content}`);
  },
  printBaseMigratorInfo: function (mode) {
    this.checkIfPassedModeIsValid(mode);
    this.printCopyHeader();
    this.printExecutableScriptInfo();
    this.printSelectedModeInfo(mode);
    this.printNewLine();
  },
  execCommonErrorContent: function (spinner, err, message, stage, allStages) {
    this.stopErrorSpinner(spinner, message, stage, allStages);
    this.printNewLine();
    this.printErrorMessage(err);
    throw new Error(err);
  },
  checkInputArguments: function (args) {
    const parsedOnErrorArgs = args.map(arg => `--${arg.name}`).join(', ');
    try {
      return commandLineArgs(args);
    } catch (err) {
      this.printErrorMessage(`Script takes arguments: ${parsedOnErrorArgs}.`);
      process.exit(1);
    }
  },
  printReplaceMode: function (isReplace) {
    if (isReplace) {
      console.log(`Executing script in ${'replace'.cyan} mode.`);
    }
  },
  loadEnvVariables: function () {
    const envPath = path.join(config.submodules.base.path, '.env');
    if (fs.existsSync(envPath)) {
      dotenv.config({ path: envPath });
    }
  },
  s3EstabilishedConnCmd: function (s3ContainerPort) {
    return [
      'mc alias set miniotr',
      `http://localhost:${s3ContainerPort}`,
      process.env.ENV_MSPH_MINIO_USERNAME,
      process.env.ENV_MSPH_MINIO_PASSWORD,
    ].join(' ');
  },
};
